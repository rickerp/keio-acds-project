/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.keio.acds.userservice.api;

import jp.keio.acds.userservice.dto.Store;
import jp.keio.acds.userservice.dto.StoreCreate;
import jp.keio.acds.userservice.dto.StoreUpdate;
import jp.keio.acds.userservice.dto.TransactionUpdate;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-22T02:41:53.804+09:00[Asia/Tokyo]")
@Validated
@Tag(name = "stores", description = "Store model")
public interface StoresApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /stores : Create a new store
     *
     * @param body Store fields (required)
     * @return successful store creation (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "createStore",
        summary = "Create a new store",
        tags = { "stores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful store creation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Store.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/stores",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Store> createStore(
        @Parameter(name = "body", description = "Store fields", required = true) @Valid @RequestBody StoreCreate body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Miguels Conbini\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"store_type\" : \"CONVENIENCE_STORE\", \"created_at\" : \"2022-07-21T02:05:41.527664Z\", \"updated_at\" : \"2022-07-21T02:05:41.527664Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /stores/{storeId} : Delete store by id
     * Deletes a single store by id
     *
     * @param storeId ID of the store to delete (required)
     * @return successfully deleted the store (status code 200)
     *         or No store with the id was found (status code 404)
     */
    @Operation(
        operationId = "deleteStore",
        summary = "Delete store by id",
        tags = { "stores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully deleted the store"),
            @ApiResponse(responseCode = "404", description = "No store with the id was found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/stores/{storeId}"
    )
    default ResponseEntity<Void> deleteStore(
        @Parameter(name = "storeId", description = "ID of the store to delete", required = true) @PathVariable("storeId") UUID storeId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stores/{storeId} : Get store by id
     * Gets a single store by id
     *
     * @param storeId ID of store to return (required)
     * @return successfully got the store (status code 200)
     *         or store with id inputted not found (status code 404)
     */
    @Operation(
        operationId = "getStore",
        summary = "Get store by id",
        tags = { "stores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully got the store", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Store.class))
            }),
            @ApiResponse(responseCode = "404", description = "store with id inputted not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stores/{storeId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Store> getStore(
        @Parameter(name = "storeId", description = "ID of store to return", required = true) @PathVariable("storeId") UUID storeId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Miguels Conbini\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"store_type\" : \"CONVENIENCE_STORE\", \"created_at\" : \"2022-07-21T02:05:41.527664Z\", \"updated_at\" : \"2022-07-21T02:05:41.527664Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /stores : List stores
     * Returns a list of stores
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "listStores",
        summary = "List stores",
        tags = { "stores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Store.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stores",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Store>> listStores(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Miguels Conbini\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"store_type\" : \"CONVENIENCE_STORE\", \"created_at\" : \"2022-07-21T02:05:41.527664Z\", \"updated_at\" : \"2022-07-21T02:05:41.527664Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /stores/{storeId}/registerOrder : Register order by id
     * Register order
     *
     * @param storeId ID of store (required)
     * @param transactionUpdate Store fields to update (required)
     * @return successfully registered order (status code 200)
     */
    @Operation(
        operationId = "registerOrder",
        summary = "Register order by id",
        tags = { "stores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully registered order")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/stores/{storeId}/registerOrder",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> registerOrder(
        @Parameter(name = "storeId", description = "ID of store", required = true) @PathVariable("storeId") String storeId,
        @Parameter(name = "TransactionUpdate", description = "Store fields to update", required = true) @Valid @RequestBody TransactionUpdate transactionUpdate
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /stores/{storeId} : Update store by id
     * Update a single store by id
     *
     * @param storeId ID of the store to update (required)
     * @param storeUpdate Store fields to update (required)
     * @return successfully updated the store (status code 200)
     *         or No store with the id was found (status code 404)
     */
    @Operation(
        operationId = "updateStore",
        summary = "Update store by id",
        tags = { "stores" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully updated the store", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Store.class))
            }),
            @ApiResponse(responseCode = "404", description = "No store with the id was found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/stores/{storeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Store> updateStore(
        @Parameter(name = "storeId", description = "ID of the store to update", required = true) @PathVariable("storeId") UUID storeId,
        @Parameter(name = "StoreUpdate", description = "Store fields to update", required = true) @Valid @RequestBody StoreUpdate storeUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Miguels Conbini\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"store_type\" : \"CONVENIENCE_STORE\", \"created_at\" : \"2022-07-21T02:05:41.527664Z\", \"updated_at\" : \"2022-07-21T02:05:41.527664Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
