/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.keio.acds.userservice.api;

import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-22T02:41:53.804+09:00[Asia/Tokyo]")
@Validated
@Tag(name = "scalardb", description = "Scalar DB api")
public interface ScalardbApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /scalardb/commit/{transactionId} : Commits transaction
     * Transactional Commit
     *
     * @param transactionId Transaction Id (required)
     * @return successfully committed (status code 200)
     */
    @Operation(
        operationId = "commit",
        summary = "Commits transaction",
        tags = { "scalardb" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully committed")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/scalardb/commit/{transactionId}"
    )
    default ResponseEntity<Void> commit(
        @Parameter(name = "transactionId", description = "Transaction Id", required = true) @PathVariable("transactionId") UUID transactionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /scalardb/join/{transactionId} : Joins transaction
     * Transactional Join
     *
     * @param transactionId Transaction Id (required)
     * @return successfully joined (status code 200)
     */
    @Operation(
        operationId = "join",
        summary = "Joins transaction",
        tags = { "scalardb" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully joined")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/scalardb/join/{transactionId}"
    )
    default ResponseEntity<Void> join(
        @Parameter(name = "transactionId", description = "Transaction Id", required = true) @PathVariable("transactionId") UUID transactionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /scalardb/prepare/{transactionId} : Prepares transaction
     * Transactional Prepare
     *
     * @param transactionId Transaction Id (required)
     * @return successfully prepared (status code 200)
     */
    @Operation(
        operationId = "prepare",
        summary = "Prepares transaction",
        tags = { "scalardb" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully prepared")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/scalardb/prepare/{transactionId}"
    )
    default ResponseEntity<Void> prepare(
        @Parameter(name = "transactionId", description = "Transaction Id", required = true) @PathVariable("transactionId") UUID transactionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /scalardb/rollback/{transactionId} : Rollbacks transaction
     * Transactional Rollback
     *
     * @param transactionId Transaction Id (required)
     * @return successfully rolled back (status code 200)
     */
    @Operation(
        operationId = "rollback",
        summary = "Rollbacks transaction",
        tags = { "scalardb" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully rolled back")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/scalardb/rollback/{transactionId}"
    )
    default ResponseEntity<Void> rollback(
        @Parameter(name = "transactionId", description = "Transaction Id", required = true) @PathVariable("transactionId") UUID transactionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
