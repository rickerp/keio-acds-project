/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package jp.keio.acds.userservice.api;

import jp.keio.acds.userservice.dto.Supplier;
import jp.keio.acds.userservice.dto.SupplierCreate;
import jp.keio.acds.userservice.dto.SupplierUpdate;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-22T02:41:53.804+09:00[Asia/Tokyo]")
@Validated
@Tag(name = "suppliers", description = "Supplier model")
public interface SuppliersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /suppliers : Create a new supplier
     *
     * @param body Supplier fields (required)
     * @return successful supplier creation (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "createSupplier",
        summary = "Create a new supplier",
        tags = { "suppliers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful supplier creation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Supplier.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/suppliers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Supplier> createSupplier(
        @Parameter(name = "body", description = "Supplier fields", required = true) @Valid @RequestBody SupplierCreate body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"name\" : \"Ricardo's Meat\", \"product_type\" : \"MEAT\", \"created_at\" : \"2022-07-21T02:05:41.527664Z\", \"updated_at\" : \"2022-07-21T02:05:41.527664Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /suppliers/{supplierId} : Delete supplier by id
     * Deletes a single supplier by id
     *
     * @param supplierId ID of the supplier to delete (required)
     * @return successfully deleted the supplier (status code 200)
     *         or No supplier with the id was found (status code 404)
     */
    @Operation(
        operationId = "deleteSupplier",
        summary = "Delete supplier by id",
        tags = { "suppliers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully deleted the supplier"),
            @ApiResponse(responseCode = "404", description = "No supplier with the id was found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/suppliers/{supplierId}"
    )
    default ResponseEntity<Void> deleteSupplier(
        @Parameter(name = "supplierId", description = "ID of the supplier to delete", required = true) @PathVariable("supplierId") UUID supplierId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /suppliers/{supplierId} : Get supplier by id
     * Gets a single supplier by id
     *
     * @param supplierId ID of supplier to return (required)
     * @return successful listing of suppliers (status code 200)
     *         or supplier with id inputted not found (status code 404)
     */
    @Operation(
        operationId = "getSupplier",
        summary = "Get supplier by id",
        tags = { "suppliers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful listing of suppliers", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Supplier.class))
            }),
            @ApiResponse(responseCode = "404", description = "supplier with id inputted not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/suppliers/{supplierId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Supplier> getSupplier(
        @Parameter(name = "supplierId", description = "ID of supplier to return", required = true) @PathVariable("supplierId") UUID supplierId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"name\" : \"Ricardo's Meat\", \"product_type\" : \"MEAT\", \"created_at\" : \"2022-07-21T02:05:41.527664Z\", \"updated_at\" : \"2022-07-21T02:05:41.527664Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /suppliers : List suppliers
     * Returns a list of suppliers
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "listSuppliers",
        summary = "List suppliers",
        tags = { "suppliers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Supplier.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/suppliers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Supplier>> listSuppliers(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"name\" : \"Ricardo's Meat\", \"product_type\" : \"MEAT\", \"created_at\" : \"2022-07-21T02:05:41.527664Z\", \"updated_at\" : \"2022-07-21T02:05:41.527664Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /suppliers/{supplierId} : Update supplier by id
     * Update a single supplier by id
     *
     * @param supplierId ID of the supplier to update (required)
     * @param supplierUpdate Supplier fields to update (required)
     * @return successfully updated the supplier (status code 200)
     *         or No supplier with the id was found (status code 404)
     */
    @Operation(
        operationId = "updateSupplier",
        summary = "Update supplier by id",
        tags = { "suppliers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successfully updated the supplier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Supplier.class))
            }),
            @ApiResponse(responseCode = "404", description = "No supplier with the id was found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/suppliers/{supplierId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Supplier> updateSupplier(
        @Parameter(name = "supplierId", description = "ID of the supplier to update", required = true) @PathVariable("supplierId") UUID supplierId,
        @Parameter(name = "SupplierUpdate", description = "Supplier fields to update", required = true) @Valid @RequestBody SupplierUpdate supplierUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"name\" : \"Ricardo's Meat\", \"product_type\" : \"MEAT\", \"created_at\" : \"2022-07-21T02:05:41.527664Z\", \"updated_at\" : \"2022-07-21T02:05:41.527664Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
